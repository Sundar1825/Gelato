{"version":3,"sources":["images/Gelato.png","components/Navbar/NavbarElements.js","components/Navbar/index.js","pages/index.js","actions/index.js","pages/newtask.js","pages/taskhistory.js","pages/funds.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["module","exports","Nav","styled","nav","NavLink","Link","Bars","FaBars","NavMenu","div","NavBtn","NavBtnLink","Navbar","to","object-fit","width","height","src","require","alt","align","activeStyle","Home","style","display","justifyContent","alignItems","addTask","executionAddress","functionName","resolverAddress","resolverFunction","type","payload","Newtask","props","styles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","state","handleChange","bind","handleSubmit","event","console","log","this","setState","target","name","value","preventDefault","actions","alert","onSubmit","href","htmlFor","placeholder","onChange","age","address","React","Component","connect","dispatch","bindActionCreators","Taskhistory","rowData","ExecutionAddress","FunctionName","ResolverAddress","ResolverFunction","TaskCreationTime","Date","toLocaleString","className","field","sortable","filter","Funds","App","path","exact","component","Boolean","window","location","hostname","match","initialState","store","createStore","action","__REDUX_DEVTOOLS_EXTENSION__","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f19995c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Gelato.52ed3dff.png\";","import { FaBars } from 'react-icons/fa';\nimport { NavLink as Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Nav = styled.nav`\n  background: #000;\n  height: 80px;\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem calc((100vw - 1000px) / 2);\n  z-index: 10;\n\n  /* Third Nav */\n  /* justify-content: flex-start; */\n`;\n\nexport const NavLink = styled(Link)`\n  color: #fff;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  padding: 0 1rem;\n  height: 100%;\n  cursor: pointer;\n\n  &.active {\n    color: #15cdfc;\n  }\n`;\n\nexport const Bars = styled(FaBars)`\n  display: none;\n  color: #fff;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0;\n    transform: translate(-100%, 75%);\n    font-size: 1.8rem;\n    cursor: pointer;\n  }\n`;\n\nexport const NavMenu = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: -24px;\n\n  /* Second Nav */\n  /* margin-right: 24px; */\n\n  /* Third Nav */\n  /* width: 100vw;\n  white-space: nowrap; */\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtn = styled.nav`\n  display: flex;\n  align-items: center;\n  margin-right: 24px;\n\n  /* Third Nav */\n  /* justify-content: flex-end;\n  width: 100vw; */\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtnLink = styled(Link)`\n  border-radius: 4px;\n  background: #256ce1;\n  padding: 10px 22px;\n  color: #fff;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;\n\n  /* Second Nav */\n  margin-left: 24px;\n\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    background: #fff;\n    color: #010606;\n  }\n`;\n","import React from 'react';\nimport {\n  Nav,\n  NavLink,\n  Bars,\n  NavMenu,\n  NavBtn,\n  NavBtnLink\n} from './NavbarElements';\n\nconst Navbar = () => {\n  return (\n    <>\n      <Nav>\n        <NavLink to='/'>\n          <img object-fit=\"contain\" width=\"100\" height=\"80\" src={require('../../images/Gelato.png')} alt='logo' align=\"left\"/>\n          <h1>Gelato Explorer</h1>\n        </NavLink>\n        <Bars />\n        <NavMenu>\n          <NavLink to='/newtask' activeStyle>\n            New Task\n          </NavLink>\n          <NavLink to='/taskhistory' activeStyle>\n            Task History\n          </NavLink>\n          <NavLink to='/funds' activeStyle>\n            Funds\n          </NavLink>\n        </NavMenu>\n        <NavBtn>\n          <NavBtnLink to='/signin'>Connect</NavBtnLink>\n        </NavBtn>\n      </Nav>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\n\nconst Home = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '90vh'\n      }}\n    >\n      <h1>Automate your smart contracts with Gelato Network. Available on Ethereum and Polygon.</h1>\n    </div>\n  );\n};\n\nexport default Home;\n","export const addTask = (executionAddress, functionName, resolverAddress, resolverFunction) => {\r\n    return{\r\n        type : 'ADD-TASK',\r\n        payload : {executionAddress, functionName, resolverAddress, resolverFunction}\r\n    };\r\n}\r\n","import React from 'react';\nimport { addTask } from '../actions/index';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nclass Newtask extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { executionAddress: '', functionName: '', resolverAddress: null, resolverFunction: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  styles = (theme) => ({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\n  handleChange(event) {\n    console.log(\"Printing event from handleChange\", event);\n    this.setState({\n      // Computed property names\n      // keys of the objects are computed dynamically\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit(event) {\n    const { executionAddress, functionName, resolverAddress, resolverFunction } = this.state\n    event.preventDefault();\n    this.props.actions.addTask(this.state.executionAddress, this.state.functionName, this.state.resolverAddress, this.state.resolverFunction);\n    alert(`\n      ***** Your Task Got Saved, Please proceed to task history to check the status *****\n    `);\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '75vh'\n        }}>\n          {/* <form onSubmit={this.props.actions.addTask(this.state.executionAddress, this.state.functionName, this.state.resolverAddress, this.state.resolverFunction)}> */}\n          <form onSubmit={this.handleSubmit}>\n            <div>\n              <a href=\"https://docs.gelato.network/tutorial\" target=\"_blank\">\n                First time using Gelato Network? Check out our docs here...\n              </a>\n              <br></br>\n              <br></br>\n              <br></br>\n              <br></br>\n              <label htmlFor='executionAddress'>Execution address</label>\n              <input\n                name='executionAddress'\n                placeholder='executionAddress'\n                value={this.state.executionAddress}\n                onChange={this.handleChange}\n              />\n            </div> <br></br>\n            <div>\n              <label htmlFor='functionName'>Function to be Automated</label>\n              <input\n                name='functionName'\n                placeholder='functionName'\n                value={this.state.functionName}\n                onChange={this.handleChange}\n              />\n            </div><br></br>\n            <div>\n              <label htmlFor='resolverAddress'>Resolver Address</label>\n              <input\n                name='resolverAddress'\n                placeholder='resolverAddress'\n                value={this.state.age}\n                onChange={this.handleChange}\n              />\n            </div><br></br>\n            <div>\n              <label htmlFor='resolverFunction'>Function to be called at the resolver</label>\n              <input\n                name='resolverFunction'\n                placeholder='resolverFunction'\n                value={this.state.address}\n                onChange={this.handleChange}\n              />\n            </div><br></br>\n            <div>\n              <button>Yes, Automate my Smart Contract!</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({ actions: bindActionCreators({ addTask: addTask }, dispatch) });\n\nexport default connect(null, mapDispatchToProps)(Newtask);","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nclass Taskhistory extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(\"Printing Props\", this.props);\n    this.state = {\n      executionAddress: this.props.executionAddress,\n      functionName: this.props.functionName,\n      resolverAddress: this.props.resolverAddress,\n      resolverFunction: this.props.resolverFunction,\n      rowData: [{ ExecutionAddress: this.props.executionAddress, FunctionName: this.props.functionName, ResolverAddress: this.props.resolverAddress, ResolverFunction: this.props.resolverFunction, TaskCreationTime: Date().toLocaleString()},\n      { ExecutionAddress: \"0x60779b57bd5f575b4013619033b0d44862b4a808ef9b5135cd75363df1754efd\", FunctionName: \"Counter.sol\", ResolverAddress: \"0x63C51b1D80B209Cf336Bec5a3E17D3523B088cdb\", ResolverFunction: \"CounterResolver.sol\" , TaskCreationTime: \"Wed Aug 18 2021 09:00:00\"}]\n    };\n  }\n\n  render() {\n    return (\n      <div\n        className=\"ag-theme-balham\"\n        style={{ height: '1000px', width: '1200px' }}\n      >\n        <AgGridReact\n          rowData={this.state.rowData}>\n          <AgGridColumn field=\"ExecutionAddress\" sortable={true} filter={true}></AgGridColumn>\n          <AgGridColumn field=\"FunctionName\" sortable={true} filter={true}></AgGridColumn>\n          <AgGridColumn field=\"ResolverAddress\" sortable={true} filter={true}></AgGridColumn>\n          <AgGridColumn field=\"ResolverFunction\" sortable={true} filter={true}></AgGridColumn>\n          <AgGridColumn field=\"TaskCreationTime\" sortable={true} filter={true}></AgGridColumn>\n        </AgGridReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    executionAddress: state.executionAddress,\n    functionName: state.functionName,\n    resolverAddress: state.resolverAddress,\n    resolverFunction: state.resolverFunction\n  };\n};\n\nexport default connect(mapStateToProps)(Taskhistory);","import React from 'react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nconst Funds = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '90vh'\n      }}\n    >\n      <h1>Funds Section</h1>\n    </div>\n  );\n};\n\n\nexport default Funds;\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages';\nimport Newtask from './pages/newtask';\nimport Taskhistory from './pages/taskhistory';\nimport Funds from './pages/funds';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        <Route path='/' exact component={Home} />\n        <Route path='/newtask' component={Newtask} />\n        <Route path='/taskhistory' component={Taskhistory} />\n        <Route path='/funds' component={Funds} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = {\r\n    executionAddress: null,\r\n    functionName: null,\r\n    resolverAddress: null,\r\n    resolverFunction: null\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':\r\n            return { ...state, executionAddress: action.payload.executionAddress, functionName: action.payload.functionName, resolverAddress: action.payload.resolverAddress, resolverFunction: action.payload.resolverFunction }\r\n        default :\r\n            return {...state}\r\n    }\r\n\r\n};\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport initialState from './reducers';\nimport { Provider } from 'react-redux';\n\nexport const store = createStore(initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconsole.log(\"Printing store : \", store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}